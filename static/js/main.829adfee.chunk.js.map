{"version":3,"sources":["tutorial/square.js","tutorial/board.js","tutorial/history.js","tutorial/game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","shake","onClick","value","Board","i","_this","this","tutorial_square","key","magicNumber","winnerCells","filter","cell","length","squares","handleClick","_this2","matriz","Array","fill","forEach","index","parseInt","map","row","j","renderSquare","boardMsg","gameOver","nextPlayerChar","getListBoard","React","Component","History","history","slice","ele","position","goBackToMovement","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","DEFAULT_BOARD_MESSAGE","X_VALUE","O_VALUE","randomizeChars","state","Math","random","setState","push","player","calculateEndGame","changeNextPlayer","col","playerSymbol","pop","isAVerticalWin","isAHorizontalWin","isADiagonalWin","handleWin","setWinnerCells","handleTie","initializeGame","aux","tutorial_board","restartGame","tutorial_history","App","Fragment","tutorial_game","style","marginBottom","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.829adfee.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./square.css\"\r\nimport \"./csshake.css\"\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className={(props.shake ?  \"shake-constant shake-slow\" : \"\")  + \" square btn\"} onClick={() => props.onClick()}>\r\n            { props.value }\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from './square';\r\nimport \"./board.css\"\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n          <Square\r\n            key={i}\r\n            magicNumber={this.props.magicNumber}\r\n            shake={this.props.winnerCells.filter(cell => i === cell).length > 0}\r\n            value={this.props.squares[i]}\r\n            onClick={() => this.props.handleClick(i)}\r\n          />\r\n        );\r\n    }\r\n\r\n    getListBoard() {\r\n        let squares = this.props.squares;\r\n        const matriz = Array(squares.length / 3).fill(Array(squares.length / 3));\r\n\r\n        squares.forEach( (value, index) => {\r\n            matriz[parseInt(index/3)][index%3] = value;\r\n        });\r\n        \r\n        const listItems = matriz.map((row, i) => {\r\n            return <div key={i} className={\"container-fluid\"}>\r\n                        {row.map((value, j) => this.renderSquare(i*3+j))}\r\n                   </div>\r\n        });\r\n        \r\n        return listItems;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center\">\r\n                <div className=\"title\">{this.props.boardMsg}\r\n                {\r\n                    !this.props.gameOver \r\n                        ? <span className=\"playerSymbol\">{this.props.nextPlayerChar}</span>                \r\n                        : \"\"     \r\n                }\r\n                </div>\r\n                <hr />\r\n                <div className=\"container board\"> \r\n                    {this.getListBoard()}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nfunction History (props) {\r\n    const history = props.history.slice();\r\n\r\n    return (!props.gameOver)\r\n        ? <div className=\"container text-center margin-top-20 margin-bottom-100\"> {\r\n            history.map((ele, index) => {\r\n                return  <div key={index} className=\"margin-top-10\">\r\n                            <div><span>Row: {parseInt(ele.position/3)+1} Col: {ele.position%3+1}</span></div>\r\n                            <div>                        \r\n                                <button className=\"btn blue\" onClick={() => props.goBackToMovement(index)}>\r\n                                    Reverse movement {index+1}\r\n                                </button>\r\n                            </div>     \r\n                        </div>     \r\n            })\r\n        } </div>\r\n        : \"\";   \r\n}\r\nexport default History;","import React from 'react';\r\nimport Board from './board';\r\nimport History from './history';\r\nimport \"./game.css\"\r\n\r\nclass Game extends React.Component {\r\n    DEFAULT_BOARD_MESSAGE = \"Next Player : \";\r\n    X_VALUE = \"\";\r\n    O_VALUE = \"\";\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.randomizeChars();\r\n        this.state = {\r\n            history: [],\r\n            squares : Array(9).fill(null),\r\n            nextPlayerChar :  this.O_VALUE,\r\n            boardMsg : this.DEFAULT_BOARD_MESSAGE,\r\n            gameOver : false,\r\n            winnerCells: []\r\n        };\r\n    }\r\n\r\n    randomizeChars() {\r\n        if(parseInt(Math.random() * 10) < 5) {\r\n            this.X_VALUE = 'X';\r\n            this.O_VALUE = 'O';\r\n        } else {\r\n            this.X_VALUE = 'O';\r\n            this.O_VALUE = 'X';\r\n        }\r\n    }\r\n\r\n    initializeGame() {\r\n        this.randomizeChars();\r\n        this.setState({\r\n            history: [],\r\n            squares : Array(9).fill(null),\r\n            nextPlayerChar :  this.O_VALUE,\r\n            boardMsg : this.DEFAULT_BOARD_MESSAGE,\r\n            gameOver : false,\r\n            winnerCells: []\r\n        });\r\n    }    \r\n\r\n    changeNextPlayer () {\r\n        this.setState({\r\n            nextPlayerChar: (this.state.history.length % 2 === 0)\r\n                        ? this.X_VALUE\r\n                        : this.O_VALUE \r\n        });\r\n    }\r\n\r\n    handleClick(i) {\r\n        const squares = this.state.squares.slice();\r\n        \r\n        if(squares[i] === null && !this.state.gameOver) {\r\n            squares[i] = this.state.nextPlayerChar;\r\n\r\n            const history = this.state.history.slice();\r\n            history.push({\r\n                \"player\": this.state.nextPlayerChar,\r\n                \"position\": i\r\n            });\r\n\r\n            this.setState({\r\n                squares: squares,\r\n                history: history\r\n            });\r\n            this.calculateEndGame(squares, i);\r\n            this.changeNextPlayer();\r\n        }\r\n    }\r\n\r\n    isAVerticalWin(squares, col) {\r\n        col %= 3;\r\n\r\n        return  squares[col] === squares[col + 3] && \r\n                squares[col] === squares[col + 6];\r\n    }\r\n\r\n    isAHorizontalWin(squares, position) {\r\n        let row = parseInt(position / 3) * 3;\r\n\r\n        return  squares[row] === squares[row + 1] && \r\n                squares[row] === squares[row + 2];\r\n    }\r\n\r\n    isADiagonalWin(squares, i) {\r\n        return (( ( (i % 4 === 0) && squares[0] === squares[4] && squares[4] === squares[8])  || \r\n                  ( (i % 4 === 2) && squares[2] === squares[4] && squares[4] === squares[6]) ) );\r\n    }\r\n\r\n    handleTie() {\r\n        this.setState({\r\n            boardMsg: \"It's a Tie !\",\r\n            nextPlayerChar :  \"\",\r\n            gameOver : true\r\n        });\r\n    }\r\n\r\n    handleWin(playerSymbol) {\r\n        this.setState({\r\n            boardMsg: \"Player \" + playerSymbol + \" has won !\",\r\n            nextPlayerChar :  \"\",\r\n            gameOver : true\r\n        });\r\n    }\r\n\r\n    goBackToMovement(index) {\r\n        const history = this.state.history.slice();\r\n        const squares = this.state.squares.slice();\r\n\r\n        if(!this.state.gameOver) {\r\n            for(let i = history.length - 1 ; i >= index; i-- ) {\r\n                squares[history[i].position] = null;\r\n                history.pop();\r\n            }\r\n\r\n            this.setState({\r\n                history,\r\n                squares,\r\n                boardMsg : this.DEFAULT_BOARD_MESSAGE,\r\n                gameOver: false,\r\n                nextPlayerChar: (history.length % 2 === 1)\r\n                        ? this.X_VALUE\r\n                        : this.O_VALUE \r\n            });\r\n        }\r\n    }\r\n\r\n    calculateEndGame(squares, i) {\r\n        // Magic Number shows where the Win happened.\r\n        // Sum these numbers :\r\n        // 1 - Vertical Win\r\n        // 2 - Horizontal Win\r\n        // 4 - Diagonal Win\r\n\r\n        let magicNumber =  \r\n                (this.isAVerticalWin   (squares, i)) * 1 + \r\n                (this.isAHorizontalWin (squares, i)) * 2 + \r\n                (this.isADiagonalWin   (squares, i)) * 4;\r\n\r\n        if( magicNumber > 0) {\r\n            if(squares[i] === this.X_VALUE) {\r\n                this.handleWin(this.X_VALUE);\r\n            } else if(squares[i] === this.O_VALUE) {\r\n                this.handleWin(this.O_VALUE);\r\n            }\r\n        \r\n            this.setWinnerCells(i, magicNumber);\r\n        } else if(this.state.history.length + 1 === 9) {\r\n            this.handleTie();\r\n        }\r\n    }\r\n\r\n    restartGame() {\r\n        this.initializeGame();\r\n    }\r\n    \r\n    setWinnerCells(i, magicNumber) {\r\n        const winnerCells = this.state.winnerCells.slice();\r\n        let aux = i;\r\n\r\n        if(magicNumber === 1 || magicNumber === 3  || magicNumber === 5) {\r\n            aux = i % 3;\r\n            winnerCells.push(aux, aux+3, aux+6);\r\n        }\r\n\r\n        if(magicNumber === 2 || magicNumber === 3 || magicNumber === 6) {\r\n            aux = parseInt(i/3) * 3;\r\n            winnerCells.push(aux, aux+1, aux+2);\r\n        }\r\n\r\n        if(magicNumber === 4 || magicNumber === 5 || magicNumber === 6) {\r\n            aux = i%4;\r\n            if(aux === 2) {\r\n                winnerCells.push(2, 4, 6);\r\n            } else if(aux === 0) {\r\n                winnerCells.push(0, 4, 8);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            winnerCells: winnerCells\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"major-title text-center\">Tic Tac Toe</div>\r\n                <Board \r\n                    boardMsg={this.state.boardMsg}\r\n                    nextPlayerChar={this.state.nextPlayerChar}\r\n                    handleClick={i => this.handleClick(i)}\r\n                    squares={this.state.squares}\r\n                    winnerCells={this.state.winnerCells}\r\n                    gameOver={this.state.gameOver}/>\r\n                <hr />\r\n                <div className=\"container text-center\">\r\n                    <button className=\"btn blue\" \r\n                            onClick={() => this.restartGame()}>\r\n                                Restart Game\r\n                    </button>\r\n                </div>\r\n                <History \r\n                    gameOver={this.state.gameOver}\r\n                    history={this.state.history}\r\n                    goBackToMovement={i => this.goBackToMovement(i)}/>\r\n            </div>    \r\n        );\r\n    };\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport Game from './tutorial/game';\nimport \"./bootstrap/bootstrap.min.css\"\n\nlet App = () => {\n  return (\n    <>\n      <div className=\"App container\">\n        <Game />\n      </div>\n      <footer style={{marginBottom: \"60px\"}}>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}